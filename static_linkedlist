#include <stdio.h>
#include <stdlib.h>
struct node{
    //链表结点
    int data;
    node* next;
};

//创建链表
node* create(int Array[]){
    node *p, *pre, *head;   //pre保存当前结点的前驱结点，head为头结点
    head = new node;    //创建头结点
    head->next = NULL;   //头结点不需要数据域，指针域初始化为NULL
    pre = head;   //记录pre为head
    for (int i=0; i<5; i++) {
        p = new node;   //新建结点
        //将Array[i]赋给新建的结点作为数据域，也可scanf输入
        p->data = Array[i];
        p->next = NULL;   //新结点的指针域设为NULL
        pre->next = p;     //前驱结点的指针域设为当前新建结点的地址
        pre = p;   //把pre设为p,作为下个结点的前驱结点
    }
    return head;  //返回头结点指针
}

//查找元素
int search(node* head,int x){
    //在以head为头结点的链表上计数元素x的个数
    int count = 0; //计数器
    node* p = head->next;   //从第一个结点开始
    while (p!=NULL) {
        //只要没有到链表末尾
        if (p->data == x) {
            count++;  //当前结点数据域为x,则count++
        }
        p=p->next;  //指针移动到下一个结点
    }
    return count;  //返回计数器count
}

//插入元素
void insert(node* head,int pos,int x){
    //将x插入以head为头结点的链表的第pos个位置
    node* p = head;
    for (int i=0; i<pos-1; i++) {
        p=p->next;   //pos-1是为了到插入位置的前一个结点
    }
    node* q = new node;  //新建结点
    q->data = x;   //新结点的数据域为x
    q->next = p->next;  //新结点的下一个结点指向原先插入位置的结点
    p->next = q;  //前一个位置的结点指向新结点
}

//删除元素
//删除以head为头结点的链表中所有数据域为x的结点
void del(node* head, int x){
    node* p = head->next;   //p从第一个结点开始枚举
    node* pre = head;   //pre始终保存p的前驱结点的指针
    while (p != NULL) {
        if(p->data == x){
            //数据域恰好为x,说明要删除该结点
            pre->next = p->next;
            delete(p);
            p = pre->next;    //p指向下一个元素
        }
        else{
            //数据域不是x, 把pre和p都后移一位
            pre = p;
            p = p->next;
        }
    }
}

int main(){
    int Array[5] = {5,3,6,1,2};
    node* L = create(Array);   //新建链表，返回的头指针head赋给L
    
    //查找x，输出x在链表中的个数
    int count = search(L, 3);
    printf("%d\n",count);
    
    //插入元素8
    insert(L,2,8);   //将x插入到第二个位置上
    
    //删除元素1
    del(L,1);
    
    L = L->next;  //从第一个结点开始有数据域
    while (L != NULL) {
        printf("%d ",L->data);  //输出每个结点的数据域
        L = L->next;
    }
    return 0;
}
